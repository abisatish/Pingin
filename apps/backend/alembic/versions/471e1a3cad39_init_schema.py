"""init schema

Revision ID: 471e1a3cad39
Revises: 
Create Date: 2025-06-28 21:39:41.734851

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '471e1a3cad39'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('college',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('common_app_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('consultant',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tags', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('highschool',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('quizquestion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tag', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('consultantmatchingquizresponse',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('consultant_id', sa.Integer(), nullable=False),
    sa.Column('passionate_subjects', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('academic_competitions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('has_published_research', sa.Boolean(), nullable=True),
    sa.Column('extracurricular_activities', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('other_subjects', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('other_activities', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('first_generation', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['consultant_id'], ['consultant.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('student',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('registration_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('highschool_id', sa.Integer(), nullable=True),
    sa.Column('photo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('paid', sa.Boolean(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('family_income_bracket', sa.Enum('UNDER_50K', 'FIFTY_TO_100K', 'HUNDRED_TO_200K', 'OVER_200K', 'PREFER_NOT_TO_SAY', name='incomebracket'), nullable=True),
    sa.Column('is_first_generation', sa.Boolean(), nullable=True),
    sa.Column('citizenship_status', sa.Enum('US_CITIZEN', 'US_PERMANENT_RESIDENT', 'INTERNATIONAL', name='citizenshipstatus'), nullable=True),
    sa.Column('is_underrepresented_group', sa.Enum('YES', 'NO', 'PREFER_NOT_TO_SAY', name='underrepresentedgroup'), nullable=True),
    sa.Column('quiz_completed', sa.Boolean(), nullable=False),
    sa.Column('college_selection_completed', sa.Boolean(), nullable=False),
    sa.Column('matching_completed', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['highschool_id'], ['highschool.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('address',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('line1', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('line2', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('zip_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('collegeapplication',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('college_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('major', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('major_category', sa.Enum('STEM', 'HUMANITIES', 'SOCIAL_SCIENCES', 'BUSINESS', 'ARTS', 'HEALTH', 'EDUCATION', 'OTHER', name='majorcategory'), nullable=True),
    sa.Column('consultant_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'SUBMITTED', 'ACCEPTED', 'REJECTED', 'WAITLISTED', 'DEFERRED', name='collegeapplicationstatus'), nullable=False),
    sa.Column('match_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['consultant_id'], ['consultant.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_collegeapplication_college_name'), 'collegeapplication', ['college_name'], unique=False)
    op.create_index(op.f('ix_collegeapplication_major'), 'collegeapplication', ['major'], unique=False)
    op.create_table('studentmatchingquizresponse',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('passionate_subjects', sa.JSON(), nullable=True),
    sa.Column('academic_competitions', sa.JSON(), nullable=True),
    sa.Column('has_published_research', sa.Boolean(), nullable=False),
    sa.Column('extracurricular_activities', sa.JSON(), nullable=True),
    sa.Column('other_subjects', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('other_activities', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('family_income_bracket', sa.Enum('UNDER_50K', 'FIFTY_TO_100K', 'HUNDRED_TO_200K', 'OVER_200K', 'PREFER_NOT_TO_SAY', name='incomebracket'), nullable=True),
    sa.Column('is_first_generation', sa.Boolean(), nullable=True),
    sa.Column('citizenship_status', sa.Enum('US_CITIZEN', 'US_PERMANENT_RESIDENT', 'INTERNATIONAL', name='citizenshipstatus'), nullable=True),
    sa.Column('is_underrepresented_group', sa.Enum('YES', 'NO', 'PREFER_NOT_TO_SAY', name='underrepresentedgroup'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('studentquizanswer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('answer', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['quizquestion.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transcript',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('gpa', sa.Float(), nullable=True),
    sa.Column('pdf_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('essayresponse',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('application_id', sa.Integer(), nullable=False),
    sa.Column('prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('response', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_edited', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['collegeapplication.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ping',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('application_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('consultant_id', sa.Integer(), nullable=True),
    sa.Column('question', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('answer', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['collegeapplication.id'], ),
    sa.ForeignKeyConstraint(['consultant_id'], ['consultant.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('comment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ping_id', sa.Integer(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('anchor_start', sa.Integer(), nullable=False),
    sa.Column('anchor_end', sa.Integer(), nullable=False),
    sa.Column('body', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('resolved', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['consultant.id'], ),
    sa.ForeignKeyConstraint(['ping_id'], ['ping.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comment')
    op.drop_table('ping')
    op.drop_table('essayresponse')
    op.drop_table('transcript')
    op.drop_table('studentquizanswer')
    op.drop_table('studentmatchingquizresponse')
    op.drop_index(op.f('ix_collegeapplication_major'), table_name='collegeapplication')
    op.drop_index(op.f('ix_collegeapplication_college_name'), table_name='collegeapplication')
    op.drop_table('collegeapplication')
    op.drop_table('address')
    op.drop_table('student')
    op.drop_table('consultantmatchingquizresponse')
    op.drop_table('quizquestion')
    op.drop_table('highschool')
    op.drop_table('consultant')
    op.drop_table('college')
    # ### end Alembic commands ###
